#!/usr/bin/env node

/**
 * 測試 GitHub MCP 工具功能
 */

import { GitHubClient } from './dist/github-client.js';

const REPO = 'BBsBrezz/Gitlab-MCP';
const PR_NUMBER = 1;

const client = new GitHubClient();

async function testMCPTools() {
  console.log('🧪 測試 GitHub MCP 工具功能\n');
  console.log('═══════════════════════════════════════\n');

  try {
    // 1. 測試獲取 PR 列表
    console.log('1️⃣ 測試 github_get_pull_requests...');
    const prs = await client.getPullRequests(REPO, { state: 'open', per_page: 5 });
    console.log(`✅ 找到 ${prs.length} 個開放的 PR:`);
    prs.forEach(pr => {
      console.log(`   - #${pr.number}: ${pr.title}`);
      console.log(`     狀態: ${pr.state}, 分支: ${pr.head.ref} → ${pr.base.ref}`);
    });
    console.log('');

    // 2. 測試獲取 PR 詳情
    console.log(`2️⃣ 測試 github_get_pull_request (PR #${PR_NUMBER})...`);
    const pr = await client.getPullRequest(REPO, PR_NUMBER);
    console.log(`✅ PR #${pr.number}: ${pr.title}`);
    console.log(`   作者: ${pr.user.login}`);
    console.log(`   狀態: ${pr.state}`);
    console.log(`   可合併: ${pr.mergeable ? '是' : pr.mergeable === false ? '否' : '檢查中...'}`);
    console.log(`   分支: ${pr.head.ref} → ${pr.base.ref}`);
    console.log(`   變更: +${pr.additions} -${pr.deletions} (${pr.changed_files} 個文件)`);
    console.log(`   建立時間: ${new Date(pr.created_at).toLocaleString()}`);
    console.log(`   URL: ${pr.html_url}`);
    console.log('');

    // 3. 測試獲取 PR 文件變更
    console.log(`3️⃣ 測試 github_get_pr_files (PR #${PR_NUMBER})...`);
    const files = await client.getPullRequestFiles(REPO, PR_NUMBER);
    console.log(`✅ 找到 ${files.length} 個變更文件:`);
    files.slice(0, 5).forEach(file => {
      const status = file.status === 'added' ? '新增' :
                     file.status === 'modified' ? '修改' :
                     file.status === 'removed' ? '刪除' : file.status;
      console.log(`   - ${status}: ${file.filename}`);
      console.log(`     +${file.additions} -${file.deletions}`);
    });
    if (files.length > 5) {
      console.log(`   ... 還有 ${files.length - 5} 個文件`);
    }
    console.log('');

    // 4. 測試獲取 PR 評論
    console.log(`4️⃣ 測試 github_get_pr_comments (PR #${PR_NUMBER})...`);
    const comments = await client.getPullRequestComments(REPO, PR_NUMBER);
    console.log(`✅ 找到 ${comments.length} 則評論`);
    if (comments.length > 0) {
      comments.forEach(comment => {
        console.log(`   - ${comment.user.login}: ${comment.body.substring(0, 50)}...`);
      });
    } else {
      console.log(`   (目前沒有評論)`);
    }
    console.log('');

    // 5. 測試創建 PR 評論
    console.log(`5️⃣ 測試 github_create_pr_comment (PR #${PR_NUMBER})...`);
    const newComment = await client.createPullRequestComment(REPO, PR_NUMBER, {
      body: `🤖 **自動化測試評論**

這是一則由 GitHub MCP 工具自動創建的測試評論！

## 測試項目
- ✅ PR 列表獲取
- ✅ PR 詳情獲取
- ✅ PR 文件變更獲取
- ✅ PR 評論獲取
- ✅ PR 評論創建

所有功能測試通過！🎉

---
_Generated by GitHub MCP Test Suite @ ${new Date().toLocaleString()}_`
    });
    console.log(`✅ 評論創建成功!`);
    console.log(`   評論 ID: ${newComment.id}`);
    console.log(`   URL: ${newComment.html_url}`);
    console.log('');

    // 6. 測試獲取倉庫資訊
    console.log(`6️⃣ 測試 github_get_repository...`);
    const repo = await client.getRepository(REPO);
    console.log(`✅ 倉庫: ${repo.full_name}`);
    console.log(`   描述: ${repo.description || '無描述'}`);
    console.log(`   預設分支: ${repo.default_branch}`);
    console.log(`   星標: ${repo.stargazers_count}`);
    console.log(`   語言: ${repo.language || 'N/A'}`);
    console.log('');

    // 7. 測試獲取提交歷史
    console.log(`7️⃣ 測試 github_get_commits...`);
    const commits = await client.getCommits(REPO, { per_page: 3 });
    console.log(`✅ 最近 ${commits.length} 個提交:`);
    commits.forEach(commit => {
      const message = commit.commit.message.split('\n')[0];
      console.log(`   - ${commit.sha.substring(0, 7)}: ${message}`);
      console.log(`     作者: ${commit.commit.author.name}`);
    });
    console.log('');

    // 測試總結
    console.log('═══════════════════════════════════════');
    console.log('✅ 所有 MCP 工具測試完成!');
    console.log('═══════════════════════════════════════\n');
    console.log('測試的工具:');
    console.log('  ✅ github_get_pull_requests');
    console.log('  ✅ github_get_pull_request');
    console.log('  ✅ github_get_pr_files');
    console.log('  ✅ github_get_pr_comments');
    console.log('  ✅ github_create_pr_comment');
    console.log('  ✅ github_get_repository');
    console.log('  ✅ github_get_commits');
    console.log('');
    console.log('🎉 GitHub MCP 伺服器功能完全正常!\n');

    return {
      success: true,
      pr: pr,
      comment: newComment
    };

  } catch (error) {
    console.error('❌ 測試失敗:', error.message);
    if (error.response) {
      console.error(`HTTP 狀態: ${error.response.status}`);
      console.error(`錯誤詳情: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    throw error;
  }
}

// 執行測試
testMCPTools().catch(error => {
  console.error('測試過程中發生錯誤:', error);
  process.exit(1);
});
